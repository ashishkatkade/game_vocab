name: Deploy to EC2
on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Delete existing stack
        run: |
          aws cloudformation delete-stack --stack-name ec2-deployment-stack
          aws cloudformation wait stack-delete-complete --stack-name ec2-deployment-stack
        continue-on-error: true

      - name: Deploy CloudFormation stack
        run: |
          set -e
          # Deploy the stack
          aws cloudformation deploy \
            --stack-name ec2-deployment-stack \
            --template-file ./cloudformation.yaml \
            --capabilities CAPABILITY_NAMED_IAM
          
          # Wait for stack to complete
          aws cloudformation wait stack-create-complete --stack-name ec2-deployment-stack
          
          # Get and verify the IP
          INSTANCE_PUBLIC_IP=$(aws cloudformation describe-stacks \
            --stack-name ec2-deployment-stack \
            --query "Stacks[0].Outputs[?OutputKey=='InstancePublicIP'].OutputValue" \
            --output text)
          
          if [ -z "$INSTANCE_PUBLIC_IP" ]; then
            echo "Failed to get instance IP"
            exit 1
          fi
          
          echo "Got new instance IP: $INSTANCE_PUBLIC_IP"
          echo "EC2_PUBLIC_IP=${INSTANCE_PUBLIC_IP}" >> $GITHUB_ENV
          
          # Wait for instance to be ready
          echo "Waiting for instance to be ready..."
          sleep 60

      - name: Deploy files to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "."
          target: "/home/ec2-user/flask-nginx"

      - name: Run Docker Compose on EC2
        uses: appleboy/ssh-action@v0.1.2
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd /home/ec2-user/flask-nginx
            sudo docker-compose down
            sudo docker-compose up -d
