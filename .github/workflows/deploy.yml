name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Update to your desired AWS region

      # Step 3: Deploy CloudFormation stack
      - name: Deploy CloudFormation stack
        run: |
          set -e
          aws cloudformation deploy \
            --stack-name ec2-deployment-stack \
            --template-file ./cloudformation.yaml \
            --capabilities CAPABILITY_NAMED_IAM
          
          # Get the EC2 instance's public IP
          INSTANCE_PUBLIC_IP=$(aws cloudformation describe-stacks \
            --stack-name ec2-deployment-stack \
            --query "Stacks[0].Outputs[?OutputKey=='InstancePublicIP'].OutputValue" \
            --output text)
          
          echo "EC2_PUBLIC_IP=${INSTANCE_PUBLIC_IP}" >> $GITHUB_ENV

      # Step 4: Copy files to the EC2 instance
      - name: Deploy files to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "."
          target: "/home/ec2-user/flask-nginx"

      # Step 5: SSH into EC2 and run Docker Compose
      - name: Run Docker Compose on EC2
        uses: appleboy/ssh-action@v0.1.2
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd /home/ec2-user/flask-nginx
            sudo docker-compose down
            sudo docker-compose up -d

